package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private final JoinPredicate p;
    private final OpIterator[] children = new OpIterator[2];
    private Tuple currentTuple;
    

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        
    	this.p = p;
    	this.children[0] = child1;
    	this.children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.children[0].getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	return this.children[1].getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.children[0].getTupleDesc(), this.children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	super.open();
    	this.children[0].open();
    	this.children[1].open();
        
    }

    public void close() {
        super.close();
        this.children[0].close();
        this.children[1].close();
        
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.children[0].rewind();
        this.children[1].rewind();
        this.currentTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	OpIterator child1 = children[0];
    	OpIterator child2 = children[1];
    			
    	if (currentTuple == null && child1.hasNext()){
    		currentTuple = child1.next();
    	}
    	
    	while (currentTuple != null){
    		while(child2.hasNext()){
    			Tuple t2 = child2.next();
    			if (p.filter(currentTuple, t2)){
    				Tuple combined = new Tuple(this.getTupleDesc());
    				int numField1 = currentTuple.getTupleDesc().numFields();
    				int numField2 = t2.getTupleDesc().numFields();
    				
    				
    				for (int i = 0; i < numField1; i++){
    					combined.setField(i, currentTuple.getField(i));
    				}
    				
    				for (int i = 0; i < numField2; i++){
    					combined.setField(i + numField1, t2.getField(i));
    				}
    				
    				return combined;
    			}
    		}
    		if (child1.hasNext()){
    			currentTuple = child1.next();
    		}
    		
    		else {
    			currentTuple = null;
    		}
    		
    		child2.rewind();
    		
    	}
    	return null;
    	
        
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {this.children[0], this.children[1]};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.children[0] = children[0];
        this.children[1] = children[1];
    }

}
